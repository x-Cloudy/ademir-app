generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name            String
  nick            String?
  link            String?
  email           String            @unique
  password        String
  wallet          String?
  whatsapp        String
  active          Boolean           @default(true)
  matriz          String[]
  createdAt       DateTime          @default(now())
  id              Int               @id @default(autoincrement())
  deletedAt       DateTime?
  status          Boolean           @default(false)
  updatedAt       DateTime?
  plataform       String[]
  indication      String?
  roles           String[]
  binaryTreeid    Int?
  Indicator       String?
  sidePreference  String?
  codeInvite      String            @default("MS1zM2NyM3Q")
  BinaryTree      BinaryTree?
  IndicateNominee IndicateNominee[] @relation("IndicatedUser")
  Indicates       Indicates?
  MatrizCooper    MatrizCooper[]
  MatrizGold      MatrizGold[]
  MatrizSilver    MatrizSilver[]
  binaryTree      BinaryTree?       @relation("SponsorUser", fields: [binaryTreeid], references: [id])
  indications    IndicatedUsers[]  @relation("UserIndicator")
  indicatedBy    IndicatedUsers[]  @relation("UserIndicated")

  @@map("users")
}

model IndicatedUsers {
  id           Int    @id @default(autoincrement())
  indicatorId  Int    // ID do usuário que fez a indicação
  indicatedId  Int    // ID do usuário indicado

  indicator    User   @relation("UserIndicator", fields: [indicatorId], references: [id])
  indicated    User   @relation("UserIndicated", fields: [indicatedId], references: [id])

  @@unique([indicatorId, indicatedId]) // Impede duplicações de indicação
}


model Indicates {
  id               Int               @id @default(autoincrement())
  userId           Int               @unique
  nominees         String[]
  count            Int
  indicateNominees IndicateNominee[] @relation("IndicatesToIndicateNominee")
  indicate         User              @relation(fields: [userId], references: [id])

  @@map("indicates")
}

model IndicateNominee {
  id          Int       @id @default(autoincrement())
  indicatesId Int
  indicateeId Int
  insertedAt  DateTime  @default(now())
  indicatee   User      @relation("IndicatedUser", fields: [indicateeId], references: [id])
  indicates   Indicates @relation("IndicatesToIndicateNominee", fields: [indicatesId], references: [id])

  @@map("indicate_nominee")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String
  options        String?
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement())
  queue        String @db.VarChar(255)
  payload      String
  attempts     Int    @db.SmallInt
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt?
  ip_address    String? @db.VarChar(45)
  user_agent    String?
  payload       String
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model MatrizCooper {
  id     Int  @id @default(autoincrement())
  userId Int
  order  Int
  user   User @relation(fields: [userId], references: [id])

  @@map("matriz_cooper")
}

model MatrizSilver {
  id     Int  @id @default(autoincrement())
  userId Int
  order  Int
  user   User @relation(fields: [userId], references: [id])

  @@map("matriz_silver")
}

model MatrizGold {
  id     Int  @id @default(autoincrement())
  userId Int
  order  Int
  user   User @relation(fields: [userId], references: [id])

  @@map("matriz_gold")
}

model tableText {
  id   Int     @id @default(autoincrement())
  text String?
}

model BinaryTree {
  id            Int          @id @default(autoincrement())
  userId        Int          @unique
  sponsorId     Int?
  leftChildId   Int?
  rightChildId  Int?
  createdAt     DateTime     @default(now())
  leftChild     BinaryTree?  @relation("LeftChild", fields: [leftChildId], references: [id])
  leftChildren  BinaryTree[] @relation("LeftChild")
  rightChild    BinaryTree?  @relation("RightChild", fields: [rightChildId], references: [id])
  rightChildren BinaryTree[] @relation("RightChild")
  sponsor       BinaryTree?  @relation("SponsorUser", fields: [sponsorId], references: [id])
  sponsored     BinaryTree[] @relation("SponsorUser")
  user          User         @relation(fields: [userId], references: [id])
  User          User[]       @relation("SponsorUser")

  @@map("binary_tree")
}

model PasswordResetToken1 {
  id        String   @id @default(uuid())
  email     String   @unique
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
}
