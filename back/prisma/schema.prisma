generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int    @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  wallet     String?
  whatsapp   String
  active     Boolean   @default(true)
  status     Boolean   @default(false)
  matriz     String[]
  roles      String[]
  indication String?
  plataform  String[]
  sidePreference   String? 
  createdAt  DateTime @default(now())
  updatedAt  DateTime?
  deletedAt  DateTime?

  MatrizCooper MatrizCooper[]
  MatrizSilver MatrizSilver[]
  MatrizGold   MatrizGold[]

  @@map("users")

  Indicates Indicates[]
  IndicateNominee IndicateNominee[] @relation("IndicatedUser")
  binaryTree BinaryTree? @relation("SponsorUser", fields: [binaryTreeid], references: [id])
  binaryTreeid Int?
  BinaryTree BinaryTree[] 
}

model Indicates {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  indicate User   @relation(fields: [userId], references: [id])
  count    Int
  nominees String[]
  
  indicateNominees IndicateNominee[] @relation("IndicatesToIndicateNominee")

  @@map("indicates")
}

model IndicateNominee {
  id          Int      @id @default(autoincrement())
  indicatesId Int
  indicateeId Int
  insertedAt  DateTime @default(now())

  indicates   Indicates @relation(fields: [indicatesId], references: [id], name: "IndicatesToIndicateNominee")
  indicatee   User      @relation(fields: [indicateeId], references: [id], name: "IndicatedUser")

  @@map("indicate_nominee")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String
  options        String?
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement())
  queue        String @db.VarChar(255)
  payload      String
  attempts     Int    @db.SmallInt
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@index([queue], map: "jobs_queue_index")
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt?
  ip_address    String? @db.VarChar(45)
  user_agent    String?
  payload       String
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}
model MatrizCooper {
  id        Int    @id @default(autoincrement()) 
  userId    Int
  user      User   @relation(fields: [userId], references: [id])
  order     Int

  @@map("matriz_cooper")
}

model MatrizSilver {
  id        Int    @id @default(autoincrement()) 
  userId    Int
  user      User   @relation(fields: [userId], references: [id])
  order     Int

  @@map("matriz_silver")
}

model MatrizGold{
  id        Int    @id @default(autoincrement()) 
  userId    Int    
  user      User   @relation(fields: [userId], references: [id])
  order     Int
  
  @@map("matriz_gold")
}

model tableText {
  id        Int    @id @default(autoincrement())
  text      String? @db.Text
}

model BinaryTree {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])

  sponsorId   Int?     
  sponsor     BinaryTree? @relation("SponsorUser", fields: [sponsorId], references: [id])
  sponsored   BinaryTree[] @relation("SponsorUser")

  leftChildId Int?     
  leftChild   BinaryTree? @relation("LeftChild", fields: [leftChildId], references: [id])
  leftChildren BinaryTree[] @relation("LeftChild")

  rightChildId Int?    
  rightChild  BinaryTree? @relation("RightChild", fields: [rightChildId], references: [id])
  rightChildren BinaryTree[] @relation("RightChild")

  createdAt   DateTime @default(now())

  @@map("binary_tree")
  User User[] @relation("SponsorUser")
}




