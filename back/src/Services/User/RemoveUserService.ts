import prismaClient from "../../prisma";

class RemoveUserService {
  async execute({ user_id }: { user_id: string }) {
    const userId = parseInt(user_id, 10);

    // Valida√ß√£o robusta do ID
    if (isNaN(userId)) {
      throw new Error("ID do usu√°rio inv√°lido");
    }

    return await prismaClient.$transaction(async (prisma) => {
      // 1. Verifica se o usu√°rio existe
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: { id: true }
      });

      if (!user) {
        throw new Error("Usu√°rio n√£o encontrado ‚ùå");
      }

      // 2. Exclui todas as depend√™ncias
      // BinaryTree
      await prisma.binaryTree.deleteMany({
        where: {
          OR: [
            { userId: userId },
            { sponsorId: userId }
          ]
        }
      });

      // IndicatedUsers (ambos lados da rela√ß√£o)
      await prisma.indicatedUsers.deleteMany({
        where: {
          OR: [
            { indicatorId: userId }, // Onde ele indicou algu√©m
            { indicatedId: userId }  // Onde foi indicado por algu√©m
          ]
        }
      });

      // 3. Finalmente exclui o usu√°rio
      await prisma.user.delete({
        where: { id: userId }
      });

      return { message: "Usu√°rio nuclearizado com sucesso üí•" };
    });
  }
}

export { RemoveUserService };